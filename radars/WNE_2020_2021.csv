name,quadrant,ring,icon,description
React,Frontend,Adopt,lock,"<p>React is a simple and lightweight JavaScript library for developing user interfaces in modern applications.</p>
<h3>Pros</h3>
<ul>
<li>Simple, lightweight, and fast.</li>
<li>Project backed by Facebook and has a massive community around it.</li>
<li>Fantastic developer ecosystem.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not a full-featured framework. Generally requires many different libraries to get desired functionality.</li>
<li>Rapidly evolving API can cause challenges in maintaining consistency between multiple applications on different versions.</li>
</ul>
<p>When decision made: 03/05/2020<br />
When decision will be revisited: 01/01/2022</p>
<p>Replaces <a href="""">Angular</a>.</p>
"
React scripts,Frontend,Adopt,confident,"<p>Package that includes the scripts and configuration used by <a href=""https://github.com/facebook/create-react-app"">Create React App</a>.</p>
<h3>Pros</h3>
<ul>
<li>Create new React applications with no build configuration.</li>
<li>Single dependency for build tooling.</li>
<li>Support for ES6, <a href="""">TypeScript</a>, and <a href="""">SASS</a> right out of the box.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Opinionated configuration. Not easily customizable without ejecting.</li>
<li>Focused on building single-page applications. Not well suited for building libraries or applications with server-side rendering.</li>
</ul>
<p>When decision made: 03/05/2020<br />
When decision will be revisited: 01/01/2022</p>
<p>Replaces <a href="""">Angular CLI</a>.</p>
"
Redux,Frontend,Adopt,confident,"<p>A predictable state container for JavaScript applications.</p>
<h3>Pros</h3>
<ul>
<li>Centralized logic for managing global application state. Not tied to view.</li>
<li>One-way data flow makes it easy to test and debug.</li>
<li>Easily extensible via middleware.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires more “boilerplate” code.</li>
<li>Performance implications for too much state in global store.</li>
<li>Difficult for inexperienced developers to determine what belongs in Redux.</li>
</ul>
<p>When decision made: 03/05/2020<br />
When decision will be revisited: 01/01/2022</p>
"
TypeScript,Frontend,Adopt,confident,Typescript provides strong typing and better tooling. Ultimately leading to more stable code.
webpack,Frontend,Adopt,lock,coming
Yarn,Frontend,Adopt,leaning,coming
Jest,Frontend,Adopt,leaning,coming
KendoReact,Frontend,Adopt,leaning,Pre built component library. 
SASS,Frontend,Adopt,leaning,Broader adoption and faster than LESS.
Cypress,Frontend,Trial,budding,coming
React Native,Frontend,Trial,budding,coming
LESS,Frontend,Hold,none,Less is less than SASS
Karma,Frontend,Hold,none,coming
Angular,Frontend,Hold,none,coming
Angular CLI,Frontend,Hold,none,coming
AngularJS,Frontend,Hold,none,coming
Jasmine,Frontend,Hold,none,Jest uses Jasmine but Jasmine alone no.
Protractor,Frontend,Hold,none,"There are better tools today, no, dang it."
Foundation,Frontend,Hold,none,coming
NPM CLI,Frontend,Hold,none,"We'll still be using NPM as a registry for packages but we'll use the yarn command for building, packing, and running the server."
Unity3D,Frontend,Hold,none,Unity3D is great for 3D applications on any platform.
ASP.Net Core,Backend,Adopt,lock,Fast and awesome :)
.Net Core App,Backend,Adopt,lock,Background processing of items. This would likely be implemented as a lambda function or a kubernetes job.
xUnit,Backend,Adopt,leaning,xUnit is directly supported in native applications.
Java + Spring,Backend,Adopt,lock,coming
Jmeter,Backend,Adopt,confident,Good provider for load testing which can be done as k8s jobs in a distributed model for large scale tests. 
gRPC,Backend,Trial,budding,Useful for interservice communication amongst microservices. 
GraphQL,Backend,Trial,budding,Useful for flexible data interfaces.
Azure web apps,Backend,Hold,none,coming
Azure cloud services,Backend,Hold,none,ew
Node,Backend,Hold,none,coming
Ruby,Backend,Hold,none,coming
Sidekiq,Backend,Hold,none,coming
Go,Backend,Hold,none,coming
nUnit,Backend,Hold,none,
Kinesis,Data,Adopt,confident,coming
SNS,Data,Adopt,confident,coming
Snowflake,Data,Adopt,lock,coming
DynamoDB,Data,Adopt,lock,"<p>Dynamo is a NOSQL database hosted and manged by AWS. It is built with scale in mind and we have had good experiences building solid scalable applications.</p>
<h3>Pros</h3>
<ul>
<li>Very inexpensive</li>
<li>Practically infinite scale</li>
<li>Incredible fast response times</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires up front knowledge of query patterns</li>
<li>Difficult to query ad-hoc</li>
</ul>
<p>Dynamo should be used by default for any microservice that is storing things as operational records that do not have heavy query requirements. For more information see <a href=""https://medium.com/imaginelearning/bring-dynamo-to-the-data-science-party-2d961b72bb8d?source=friends_link&amp;sk=5dd7bd16cbf678bb926122549d83cb4a"">This great Medium article</a></p>"
Elasticsearch,Data,Adopt,confident,"<p>Elasticsearch is a NOSQL database. Elasticsearch is a great tool for submillisecond latency and containing large amounts of data.</p>
<h3>Pros</h3>
<ul>
<li>Extremely efficient text searching</li>
<li>Great for simple metric aggregations</li>
<li>Extremely fast response times</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No ability to join documents directly</li>
<li>Can be difficult to setup and maintain</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Redis,Data,Adopt,confident,coming
Postgres,Data,Adopt,lock,coming
PowerBI,Data,Adopt,confident,coming
Kinesis Data Analytics (Apache Flink),Data,Trial,budding,coming
Postgres (Aurora Serverless),Data,Trial,budding,coming
Databricks,Data,Trial,budding,coming
Matillion,Data,Hold,confident,"<p>Matillion is a purpose-built ETL designer and job engine. It’s a cloud-only product (cannot run locally in virtual machines or docker containers) and supports Redshift and Snowflake. The design canvas has a tree of job definitions and each job definition is represented as a graph of visual components. The user is able to drag and drop the components and alter their properties. Though the intent is largely to expose a point and click interface, it also supports custom SQL in various components and in practice Imagine Learning has used a fair amount of custom SQL.</p>
<p>While the product falls under an ETL umbrella, it is more accurately an ELT engine because the work is mostly executed in the target Redshift or Snowflake engine. In other words, executing a job (scheduled or otherwise) results in the Matillion runtime executing queries against Redshift/Snowflake such that the inputs and outputs of the queries are different tables in Redshift/Snowflake. The Matillion software itself runs on an EC2 instance but the resource utilization is relatively light there. Cost is based on actual EC2 cost plus a licensing fee to Matillion.</p>
<p>Matillion includes support for extraction from many source technologies. The pattern is such that queries can be executed against source systems and the results are placed in the target Redshift / Snowflake, and then transforms are executed in the form of SQL on the target system to move and transform the data to destination tables (such as fact and dimension tables).</p>
<h3>Pros</h3>
<ul>
<li>Potentially quicker to path to working ETL system than custom coded spark/glue/emr/databricks</li>
<li>SQL-centric nature well received by data engineers with extensive SQL background</li>
<li>Support for both Redshift and Snowflake as destination systems</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Cloud-only. No means to execute locally.</li>
<li>Compared to ETL where the majority of the T is done out-of-process from redshift / snowflake, a heaver load is placed on redshift / snowflake.</li>
</ul>
"
Redshift,Data,Hold,none,coming
MySQL,Data,Hold,none,coming
SQL Server,Data,Hold,none,coming
MongoDB,Data,Hold,none,coming
Ruby Active Warehouse,Data,Hold,none,coming
QuickSight,Data,Hold,none,coming
Glue,Data,Hold,none,coming
Periscope,Data,Hold,none,coming
EMR (Spark),Data,Hold,none,coming
ELK (OpenDistro),Infrastructure,Adopt,confident,"<p>ELK is the combination of Elasticsearch, Kibana and Logstash. See <a href="""">Elasticsearch</a> for more information on that but Logstash is a good ingester of data into Elasticsearch. This combination of services makes for a solid logging solution. Additionally, AWS has contributed back to the community with <a href=""https://opendistro.github.io/for-elasticsearch/"">OpenDistro</a> to fill the gaps in authentication and management of the system.</p>
<h3>Pros</h3>
<ul>
<li>Can handle large amounts of log data</li>
<li>Very low cost because there are no license restrictions</li>
<li>Automatic ingestion of any log</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires some maintenance and consideration on the indices themselves</li>
<li>Doesn’t have</li>
</ul>
<p><a href=""https://engineering.grab.com/structured-logging"">Structured logs</a> should be used where possible to make the searches as efficient as possible.</p>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Kibana,Infrastructure,Adopt,confident,"<p>Kibana is a great frontend system for Elasticsearch. Look at (ELk)[] for more information as by itself it is merely a visualization tool.</p>
"
Kubernetes,Infrastructure,Adopt,lock,"<p>Kubernetes is a container orchestration system. Kubernetes has become the de facto standard in the last few years when it comes to running containers.</p>
<h3>Pros</h3>
<ul>
<li>Provides infinite scaling abilities</li>
<li>Self healing pods when configured with health and readiness probes</li>
<li>Efficiently packs applications onto the nodes to achieve greater application density which leads to lower costs</li>
<li>Extremely active community that is constantly contributing back to the ecosystem</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Initial configuration can be very daunting</li>
<li>Required updates on the regular to not fall behind</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Docker,Infrastructure,Adopt,lock,"<p>Docker is a means of packaging an application with all of its dependencies required to run. You can think of a Docker container as a lightweight virtual machine without the overhead of the OS. Typically we prefer smaller containers based on the Alpine images. When you build your applications this way you can have the same deployment patterns with all applications regardless of language.</p>
<h3>Pros</h3>
<ul>
<li>Provides a means to control the running environments easily</li>
<li>The container provides a consistent experience across the board</li>
<li>Containers enable greater application density to use every ounce of server resources efficiently</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Debugging can be more difficult if there is an issue with the container itself</li>
</ul>
<p>Combining these benefits with <a href="""">Kubernetes</a> leads to a great way to manage all applications efficiently.</p>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
AWS Lambda (event processing),Infrastructure,Adopt,confident,"<p>AWS Lambda functions are a great way to run snippets of code without worrying about the underlying infrastructure the code would run on. Currently this is most useful as means to cheaply process events from Kinesis, DynamoDb streams, SNS, or SQS. AWS has provided all of the plumbing to handle this efficiently.</p>
<h3>Pros</h3>
<ul>
<li>Very cheap, insanely cheap</li>
<li>Effectively infinite scale</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not a good fit for IO bound operations</li>
<li>Deployment pipelines for the functions themselves is not ideal. Even when using <a href="""">Terraform</a> you have to resort to zip files.</li>
<li>You must wait for updated frameworks (new versions of Node or .NET core for example) to be available on AWS</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Terraform,Infrastructure,Adopt,lock,"<p><a href=""https://www.terraform.io/"">Terraform</a> is an open source tool to use <code>Infrastructure as Code</code> principles. As your infrastructure is created you can always make modifications and deploy all of your infra like you would with code.</p>
<h3>Pros</h3>
<ul>
<li>Syntactically superior to other tools</li>
<li>Free</li>
<li>Active community</li>
<li>Can be used with any type of infra, not just AWS</li>
<li>Leads to repeatable infra with less errors</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Doesn’t provided direct drift detection</li>
<li>IAM access is required to use Terraform effectively</li>
</ul>
<p>Terraform workspaces should be employed to separate different environments.<br />
Replaces <a href="""">Cloud Formation</a></p>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Fluentd,Infrastructure,Adopt,confident,"<p><a href=""https://www.fluentd.org/"">Fluentd</a> is an open source tool that will automatically collect your logs and send them to an archiving source. There are many possibilities with the tool but we have found that running Fluentd as a daemon-set on our <a href="""">Kubernetes</a> cluster and logging things to <code>stdout</code> as the most effective logging solution.</p>
<h3>Pros</h3>
<ul>
<li>Automatic collection of logs from simple sources</li>
<li>Can do some log enrichment and manipulation</li>
<li>Can batch and send logs directly to Elasticsearch</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Configuration is a bit cryptic</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Github (source),Infrastructure,Adopt,lock,"<p><a href=""https://github.com/"">Github</a> is a platform to host all of your git based repositories. By extension <a href=""https://git-scm.com"">git</a> should be used as your distributed version control system.</p>
<h3>Pros</h3>
<ul>
<li>Provides incredible integration and tooling</li>
<li>Well structured pull requests for code reviews</li>
<li>Ability to integrate bots to accomplish tasks</li>
<li>Builtin security scanning</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Occasional outages can affect engineering</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Teamcity,Infrastructure,Adopt,leaning,"<p><a href=""https://www.jetbrains.com/teamcity/"">Teamcity</a> is a build system. Built by the folks at Jetbrains it provides all the functionality needed for continuous integration.</p>
<h3>Pros</h3>
<ul>
<li>Solid interface</li>
<li>Build templating</li>
<li>Well built plugins built by the Teamcity team</li>
<li>Great cloud build agent support on Kubernetes or using AWS AMIs</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not as popular as Jenkins and so there are less plugins</li>
<li>Costs money</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Clair,Infrastructure,Adopt,leaning,"<p><a href=""https://coreos.com/clair/docs/latest/"">Clair</a> is a security scanner for Docker containers. Using Clair you are able to determine if there are known security issues with your container.</p>
<h3>Pros</h3>
<ul>
<li>Integrates well with a private Docker registry</li>
<li>Free</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No UI</li>
<li>Configuration isn’t straightforward</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Jenkins,Infrastructure,Adopt,leaning,"<p><a href=""https://jenkins.io/"">Jenkins</a> is a build system. Built by the open source community it provides all the functionality needed for continuous integration.</p>
<h3>Pros</h3>
<ul>
<li>Innumerable plugins</li>
<li>Not the easiest interface to work with</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Sometimes low quality plugins due to open source community</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Jira,Infrastructure,Adopt,lock,"<p><a href=""https://www.atlassian.com/software/jira"">Jira</a> is project management software.</p>
<h3>Pros</h3>
<ul>
<li>Can use multiple workflows to accommodate different agile practices</li>
<li>Not the easiest interface to work with’</li>
<li>Cloud hosted</li>
<li>Good plugin support</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Can feel really clunky at times</li>
<li>Teams can be blocked when there are service interruptions</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Spinnaker,Infrastructure,Adopt,leaning,"<p><a href=""https://www.spinnaker.io/"">Spinnaker</a> is a continuous delivery tool that can work with many different types of infrastructure. While Spinnaker can work with anything we have chosen to use it primarily to manage the deployment pipelines for the applications that reside on our Kubernetes cluster.</p>
<h3>Pros</h3>
<ul>
<li>Visual workflow for releases</li>
<li>Very customizable</li>
<li>Constantly evolving</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Very resource heavy application</li>
<li>Difficult configuration</li>
<li>Occasional there are significant changes required to upgrade</li>
<li>Not super well documented</li>
</ul>
<p>When decision made: 3/5/2020<br />
When decision will be revisited: 01/01/2022</p>
"
Datadog,Infrastructure,Adopt,leaning,"<p><a href=""https://www.datadoghq.com/"">Datadog</a> is a hosted platform for monitoring and analytics. Datadog enables easy instrumentation of many types of applications and infrastructure.</p>
<h3>Pros</h3>
<ul>
<li>Very quick to implement</li>
<li>Lots of canned reports and dashboards</li>
<li>Compared to other providers they have been cheaper</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No Azure support</li>
<li>Dashboards aren’t very straightforward</li>
</ul>
<p>When decision made: 3/5/2020<br />
When decision will be revisited: 01/01/2022</p>
"
Prometheus + Grafana,Infrastructure,Adopt,confident,"<p><a href=""https://prometheus.io/"">Prometheus</a> is an open source time series database. Prometheus implements a pull model for metrics rather than a push model. Meaning your applications need to have an endpoint, typically <code>/metrics</code> that Prometheus can scrape metrics from.</p>
<p><a href=""https://grafana.com/"">Grafana</a> is an open source visualization tool that can connect to many different data sources to visualize data. Grafana also can provide alerting.</p>
<p>Because one is the data source and the other the visualization we are combining the two of them here.</p>
<h3>Pros</h3>
<ul>
<li>No cost</li>
<li>Large community support</li>
<li>Very customizable</li>
<li>Many open source libraries to easily add a metrics endpoint to any type of application</li>
<li>Can integrate with Elasticsearch and OpsGenie</li>
<li>Community made dashboards available</li>
</ul>
<h3>Cons</h3>
<ul>
<li>We administer these services ourselves</li>
<li>Lack of cohesion sometimes</li>
</ul>
<p>When decision made: 3/5/2020<br />
When decision will be revisited: 01/01/2022</p>
"
Velero (Heptio Ark),Infrastructure,Adopt,confident,"<p><a href=""https://velero.io/"">Velero</a> formerly Heptio Ark is an automated backup solution native for Kubernetes. Velero automatically backs up your k8s configuration and takes snapshots of persistent volumes if necessary.</p>
<h3>Pros</h3>
<ul>
<li>Any container automatically gets backed up</li>
<li>Easy to restore entire cluster if necessary</li>
<li>No licensing cost</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires maintenance</li>
</ul>
"
Athena,Infrastructure,Adopt,confident,"<p>Athena is a managed / on-demand query execution service. To date Imagine Learning has used it to execute SQL queries against data stored in S3. Athena can query data in S3 that is structured (parquet or ORC files) or semi-structured (JSON, XML, CSV).</p>
<p>A common scenario is that data exists in a data source that does not support SQL queries. For instance, the Imagine Learning L&amp;L and Spanish products store student data as JSON in Azure Blob storage. By replicating that data to S3 as parquet or ORC files, SQL queries can be executed against the data.</p>
<p>Sample use cases:</p>
<ul>
<li>Engineers and QA personnel can query ILEvents that operational services have emitted such as rostering events. In this use case, Athena is useful to explore the data or to troubleshoot whether a particular event was sent.</li>
<li>Engineers, QA, and data analysts can query student data for the Imagine Learning L&amp;L and Spanish products for the purposes of troubleshooting or for the purposes of producing an ad-hoc report.</li>
<li></li>
</ul>
<p>Some technology companies use Athena to transform data.  This might include taking a dataset from S3, executing a transform query, and storing the results to a second dataset in S3.</p>
<p>The cost structure of Athena queries is based on the volume of data that’s read from S3 to execute the query. The partitioning strategy of the S3 data is especially important and care should be taken to utilize the partitioning in query filters. For instance if data is partitioned by date and the Athena query has a corresponding filter then only a small subset of the S3 dataset is read when the query is executed.</p>
<p>AWS exposes a web interface for authoring and executing Athena queries which is sufficient for casual usage. Power users will more likely want to utilize an ODBC or JDBC driver so that a full-featured IDE can be used to author and execute queries, or in cases where an automated job is executing the query.</p>
<h3>Pros</h3>
<ul>
<li>Provides an SQL query interface to structured and semi-structed data stored in S3.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Without an adequate partitioning strategy and utilization of that strategy as part of the queries, costs to execute can be relatively high. As an example, the student data from L&amp;L / Spanish can cost up to $2.50 per query if the entire S3 dataset is read.  The worst case cost is entirely a function of the size of the dataset which suggests that documentation should exist to provide guidance depending on the dataset.</li>
<li>While Athena supports an ANSI SQL compatibility level, this may not be as full featured as SQL variants supported by other relational databases such as Microsoft SQL Server<br />
In some cases, other technologies like Spark could be a prefered means to query the S3 data.  This might be for performance reasons (more control over the node types that execute the query).</li>
</ul>
"
S3,Infrastructure,Adopt,confident,"<p>S3 is a distributed file system. It is highly scalable and has many uses. Recommended usages are diverse. One such scenario: it is the recommended WNE technology for data lakes including two types of zones:</p>
<ol>
<li>Raw (such as a copy of operational data stores or as the history of operational events)</li>
<li>Curated/gold (post cleanse and transform)</li>
</ol>
<p>Since S3 is a file system, there are many choices for data format. Structured formats include parquet (recommended) and ORC. Semi-structured formats include JSON (recommend JSON per line), XML, and CSV. Unstructured formats include media files such as audio and video.</p>
<p>Related to above, we see it being used as the source of master data (entities) and as the underlying source of analytical data (with replication to serving databases potentially outside S3).</p>
<h3>Pros</h3>
<ul>
<li>Cost effective storage (keep in mind that there are multiple tiers selected based on data access frequency and latency requirements)</li>
<li>High scale</li>
<li>Reasonable latency</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Without oversight it’s easy to accumulate data that does not have value</li>
</ul>
"
EKS,Infrastructure,Trial,budding,"<p><a href="""">Kubernetes</a> is the best container orchestration system around. AWS has decided to make it a first class citizen on AWS by offering a managed system. The idea here is to make it easier to maintain your k8s cluster for minimal cost.</p>
<h3>Pros</h3>
<ul>
<li>Easy to set up</li>
<li>Easier to stay up to date with k8s releases through managed nodes</li>
<li>Don’t have to worry about the control plane (master nodes)</li>
<li>More strictly adheres to best security practices</li>
<li>Integrated IAM support (though can be added to home spun clusters)</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Tied to AWS</li>
<li>Less ability to customize</li>
</ul>
<h3>Trial Goal</h3>
<p>The goal of trialing EKS is see if we can become more efficient and stay up to date without manually upgrading the cluster constantly with added security.</p>
"
Concourse CI,Infrastructure,Trial,budding,coming
NewRelic,Infrastructure,Trial,budding,coming
ECS,Infrastructure,Hold,none,coming
ECR,Infrastructure,Hold,none,coming
AWS Api Gateway,Infrastructure,Hold,none,coming
Serverless.com,Infrastructure,Hold,none,coming
Cloud Formation,Infrastructure,Hold,none,coming
TFS,Infrastructure,Hold,none,coming
Chef Infra,Infrastructure,Hold,none,coming
Github issues,Infrastructure,Hold,none,coming
