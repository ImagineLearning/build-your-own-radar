name,quadrant,ring,icon,description
React,Frontend,Invest,lock,"<p><a href=""https://reactjs.org"">React</a> is a simple and lightweight JavaScript library for developing user interfaces in modern applications.</p>
<h3>Pros</h3>
<ul>
<li>Simple, lightweight, and fast.</li>
<li>Project backed by Facebook and has a massive community around it.</li>
<li>Fantastic developer ecosystem.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not a full-featured framework. Generally requires many different libraries to get desired functionality.</li>
<li>Rapidly evolving API can cause challenges in maintaining consistency between multiple applications on different versions.</li>
</ul>
<p>When decision made: 03/05/2020<br />
When decision will be revisited: 01/01/2022</p>
<p>Replaces <a href="""">Angular</a>.</p>
"
React hooks,Frontend,Invest,confident,coming
React scripts,Frontend,Invest,confident,"<p>Package that includes the scripts and configuration used by <a href=""https://github.com/facebook/create-react-app"">Create React App</a>.</p>
<h3>Pros</h3>
<ul>
<li>Create new React applications with no build configuration.</li>
<li>Single dependency for build tooling.</li>
<li>Support for ES6, <a href="""">TypeScript</a>, and <a href="""">SASS</a> right out of the box.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Opinionated configuration. Not easily customizable without ejecting.</li>
<li>Focused on building single-page applications. Not well suited for building libraries or applications with server-side rendering.</li>
</ul>
<p>When decision made: 03/05/2020<br />
When decision will be revisited: 01/01/2022</p>
<p>Replaces <a href="""">Angular CLI</a>.</p>
"
Redux,Frontend,Invest,confident,"<p>A predictable state container for JavaScript applications.</p>
<h3>Pros</h3>
<ul>
<li>Centralized logic for managing global application state. Not tied to view.</li>
<li>One-way data flow makes it easy to test and debug.</li>
<li>Easily extensible via middleware.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires more “boilerplate” code.</li>
<li>Performance implications for too much state in global store.</li>
<li>Difficult for inexperienced developers to determine what belongs in Redux.</li>
</ul>
<p>When decision made: 03/05/2020<br />
When decision will be revisited: 01/01/2022</p>
"
TypeScript,Frontend,Invest,confident,"<p>A typed superset of JavaScript that compiles to plain JavaScript.</p>
<h3>Pros</h3>
<ul>
<li>Types enable use of highly-productive development tools and practices like static checking and code refactoring.</li>
<li>Support for the latest and evolving JavaScript features.</li>
<li>Supported by <a href="""">Angular CLI</a> and <a href="""">React scripts</a>.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Defining types can add to “boilerplate” code.</li>
<li>Adding JavaScript libraries without type definitions requires jumping through additional hoops.</li>
<li>Lacks the flexibility that comes with dynamic types in JavaScript.</li>
</ul>
<p>When decision made: Mar. 2020<br />
When decision will be revisited: Jan. 2022</p>
"
webpack,Frontend,Invest,lock,"<p>A module bundler for bundling JavaScript files for usage in a browser.</p>
<p>It is used under the hood by both <a href="""">Angular CLI</a> and <a href="""">React scripts</a>.</p>
<h3>Pros</h3>
<ul>
<li>Powerful, configurable bundler with a large ecosystem of plugins.</li>
<li>Supports code-splitting, lazy-loading, and tree shaking.</li>
<li>Lots of documentation available.</li>
<li>Comes with simple web server with live reloading.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Configuration can be complicated and unwieldy.</li>
</ul>
"
Yarn,Frontend,Invest,leaning,"<p>Yarn is a fast, stable JavaScript package manager.</p>
<h3>Pros</h3>
<ul>
<li>Utilizes caching for faster installs.</li>
<li>Optimizations for working with monorepos through <a href=""https://yarnpkg.com/features/workspaces"">workspaces</a>.</li>
<li>v1 can work as a drop-in replacment for <a href="""">NPM CLI</a>.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Separate install from Node.</li>
<li>v2 has a completely different API.</li>
</ul>
<p>Replaces <a href="""">NPM CLI</a>.</p>
"
Jest,Frontend,Invest,leaning,"<p>Jest is a delightful JavaScript Testing Framework with a focus on simplicity.</p>
<h3>Pros</h3>
<ul>
<li>Works out of the box, config free, on most JavaScript projects.</li>
<li>Already built into <a href="""">React scripts</a>.</li>
<li>Runs fast, running previously failed tests first and reorganizing runs based on how long test files take.</li>
<li>Includes functionality for dependency mocking, snapshot testing, and parallelization.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Doesn’t have as large a community around it as <a href="""">Karma</a>/<a href="""">Jasmine</a>.</li>
<li>Runs tests in a Node process by default, which can be harder to debug than tests run in a browser.</li>
</ul>
<p>Replaces <a href="""">Karma</a> and <a href="""">Jasmine</a>.</p>
"
KendoReact,Frontend,Invest,leaning,"<p>KendoReact is a UI and data visualization component library for React, built by <a href=""https://telerik.com"">Telerik</a>.</p>
<h3>Pros</h3>
<ul>
<li>Includes a huge number of components and utilities for building application UIs and data visualizations.</li>
<li>Comes with accessbility and localization features built in.</li>
<li>Tested and supported by Telerik.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Expensive ($899+ <em>per developer</em>).</li>
<li>Bulky. Can add a lot of size your application bundle.</li>
</ul>
"
SASS,Frontend,Invest,leaning,"<p><a href=""https://sass-lang.com"">Sass</a> claims to be the most mature, stable, and powerful professional grade CSS extension language in the world.</p>
<h3>Pros</h3>
<ul>
<li>Completely compatible with all versions of CSS.</li>
<li>Makes sharing styles throughout your application more convenient through variables and mixins.</li>
<li>Actively supported and developed by a consortium of several tech companies and hundreds of developers.</li>
<li>Faster than <a href="""">LESS</a>.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Makes it really easy to write bad CSS, like deeply nested selectors.</li>
<li>Another thing to configure in your build tooling.</li>
</ul>
"
Cypress,Frontend,Trial,budding,"<p><a href=""https://cypress.io"">Cypress</a> is a tool for fast, easy, reliable testing of anything that runs in a browser.</p>
<h3>Pros</h3>
<ul>
<li>Easy to debug using familiar tools like Chrome DevTools.</li>
<li>Takes snapshots as tests run, making it possible to click through step by step and see exactly what happened.</li>
<li>No more async hell. Cypress automatically waits for commands and assertions before moving on.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Does not support as many browsers as tools built on <a href=""https://www.selenium.dev/"">Selenium</a>.</li>
<li>Does not allow scripts to execute across multiple domains, causing complications with things like 3rd-party OAuth flows.</li>
</ul>
<p>Replaces <a href="""">Protractor</a>.</p>
"
React Native,Frontend,Trial,budding,"<p><a href=""https://reactnative.dev"">React Native</a> is a framework for building native mobile applications using <a href="""">React</a>.</p>
<h3>Pros</h3>
<ul>
<li>Create truly native apps while writing React code in JavaScript or <a href="""">TypeScript</a>.</li>
<li>Target multiple platforms from a single codebase.</li>
<li>Maintained by Facebook with a massive community around it.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Can have performance problems.</li>
<li>Still hasn’t hit a 1.0 release. Developers can run into breaking changes in tools and dependencies between versions.</li>
<li>Still need native mobile development experience for implementing more advanced features.</li>
</ul>
"
Tailwind CSS,Frontend,Trial,budding,"<p><a href=""https://tailwindcss.com/"">Tailwind CSS</a> is a highly customizable, low-level CSS framework that gives you all of the building blocks you need to build bespoke designs without any annoying opinionated styles you have to fight to override.</p>
<h3>Pros</h3>
<ul>
<li>Provides low-level utility classes that let you build completely custom designs without writing any CSS.</li>
<li>All utility classes come with responsive variants, facilitating mobile-first design.</li>
<li>Highly customizable. Allows configuring colors, border sizes, font weights, spacing utilities, breapoints, shadows, and more.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>It’s recommended to use as a <a href=""https://postcss.org/"">PostCSS</a> plugin, which requires extra configuration with build tools.</li>
<li>Larger learning curve due to the number of utility classes available.</li>
<li>Can result in massive CSS bundles if tooling is not configured to purge unused classes for production builds.</li>
</ul>
"
Angular,Frontend,Hold,none,coming
Angular CLI,Frontend,Hold,none,coming
Protractor,Frontend,Hold,none,"There are better tools today, no, dang it."
Karma,Frontend,Hold,none,coming
Jasmine,Frontend,Hold,none,Jest uses Jasmine but Jasmine alone no.
Foundation,Frontend,Hold,none,coming
NPM CLI,Frontend,Hold,none,"We'll still be using NPM as a registry for packages but we'll use the yarn command for building, packing, and running the server."
Unity3D,Frontend,Hold,none,Unity3D is great for 3D applications on any platform.
AngularJS,Frontend,Divest,none,coming
LESS,Frontend,Divest,none,Less is less than SASS
ASP.NET Core,Backend,Invest,lock,"<p><a href=""https://dotnet.microsoft.com/learn/aspnet/what-is-aspnet-core"">ASP.NET Core</a> is built on the new <a href="""">.NET Core</a> framework but is designed for the web. As with .NET Core this is an open source framework. While <a href=""http://ASP.NET"">ASP.NET</a> can be used for server side rendering pages the WNE strong preference is that the frontend apps are single page applications (SPAs) using <a href="""">React</a>.</p>
<h3>Pros</h3>
<ul>
<li>One of the fastest web frameworks around today</li>
<li>Works very well in containers</li>
<li>Great support for building APIs</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Lack of packages in some scenarios</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
.NET Core App,Backend,Invest,lock,"<p><a href=""https://docs.microsoft.com/en-us/dotnet/core/about"">.NET Core</a> is the successor the .NET framework. It differs from the legacy .NET framework by being cross platform and open source. In many respects .NET core has learned from Node and Ruby and other languages and made a modern ecosystem for C# programmers. AWS Lambda functions are a great way to run snippets of code without worrying about the underlying infrastructure the code would run on. Currently this is most useful as means to cheaply process events from Kinesis, DynamoDb streams, SNS, or SQS. AWS has provided all of the plumbing to handle this efficiently.</p>
<h3>Pros</h3>
<ul>
<li>Works well as Kubernetes jobs</li>
<li>Small and lightweight containers</li>
<li>Fast background processing</li>
<li>Native asynchronous support</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not as wide of a package base as some other language frameworks</li>
<li>Cannot be compiled as a single standalone binary (you must have .Net Core runtime available)</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
Java + Spring Boot,Backend,Invest,lock,"<p><a href=""https://spring.io/"">Java + Spring Boot</a> makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p>
<p>We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.</p>
<h3>Pros</h3>
<ul>
<li>Spring is the most popular Java framework</li>
<li>Opinionated framework makes creating applications easy</li>
<li>Not as heavy as full</li>
<li>Massive amount of third party libraries available</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Unused libraries can bloat overall application size</li>
<li>Limited control of your application</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
jMeter,Backend,Invest,confident,"<p><a href=""https://jmeter.apache.org/"">jMeter</a> is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions.</p>
<h3>Pros</h3>
<ul>
<li>Open source</li>
<li>Works well for many different types of tests</li>
<li>Has a client server mode where very large load tests can be run</li>
</ul>
<h3>Cons</h3>
<ul>
<li>UI is not very intuitive</li>
<li>Can be very complex to set up</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
gRPC,Backend,Trial,budding,"<p><a href=""https://grpc.io/"">gRPC</a> is a modern open source high performance RPC framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.</p>
<h3>Pros</h3>
<ul>
<li>CNCF incubating project</li>
<li>Bi-directional communication</li>
<li>Faster than standard REST based services</li>
<li>Integrated authentication</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not universally supported</li>
</ul>
<p>** Being considered for interservice communication requests</p>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
GraphQL,Backend,Trial,budding,"<p><a href=""https://graphql.org/"">GraphQL</a> is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.</p>
<h3>Pros</h3>
<ul>
<li>Front end developers don’t have to wait for backend engineers to adjust apis</li>
<li>Combine data from multiple sources in a single request</li>
<li>Self documented</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Possible to create extremely costly queries unintentionally</li>
<li>Lacks support by all libraries and packages</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
Node,Backend,Hold,none,"<p><a href=""https://nodejs.org"">Node</a> is similar in design to, and influenced by, systems like Ruby’s Event Machine and Python’s Twisted. Node.js takes the event model a bit further. It presents an event loop as a runtime construct instead of as a library. In other systems, there is always a blocking call to start the event-loop. Typically, behavior is defined through callbacks at the beginning of a script, and at the end a server is started through a blocking call like EventMachine::run(). In Node.js, there is no such start-the-event-loop call. Node.js simply enters the event loop after executing the input script. Node.js exits the event loop when there are no more callbacks to perform. This behavior is like browser JavaScript — the event loop is hidden from the user.</p>
<p>HTTP is a first-class citizen in Node.js, designed with streaming and low latency in mind. This makes Node.js well suited for the foundation of a web library or framework.</p>
<p>Node.js being designed without threads doesn’t mean you can’t take advantage of multiple cores in your environment. Child processes can be spawned by using our child_process.fork() API, and are designed to be easy to communicate with. Built upon that same interface is the cluster module, which allows you to share sockets between processes to enable load balancing over your cores.</p>
<h3>Pros</h3>
<ul>
<li>Open source</li>
<li>Very easy to start and set up an application</li>
<li>Large amount of libraries available through NPM</li>
<li>Fast</li>
<li>Can use Javascript on frontend and backend</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not statically typed</li>
<li>Enterprise support can be an issue</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
Go,Backend,Hold,budding,"<p><a href=""https://golang.org/"">Go</a> is a C style language with influence from JAVA. Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It’s a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.</p>
<h3>Pros</h3>
<ul>
<li>Extremely fast</li>
<li>Compiles to machine code</li>
<li>Concise and clean</li>
<li>Great for frameworks or multithreaded jobs</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Package management is still lacking</li>
<li>Not well suited for web apis</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
Ruby on Rails,Backend,Hold,budding,"<p><a href=""https://www.ruby-lang.org/en/"">Ruby on Rails</a> Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write. Rails is a web application development framework written in the Ruby programming language. It is designed to make programming web applications easier by making assumptions about what every developer needs to get started. It allows you to write less code while accomplishing more than many other languages and frameworks. Experienced Rails developers also report that it makes web application development more fun.</p>
<p>Rails is opinionated software. It makes the assumption that there is a “best” way to do things, and it’s designed to encourage that way - and in some cases to discourage alternatives. If you learn “The Rails Way” you’ll probably discover a tremendous increase in productivity. If you persist in bringing old habits from other languages to your Rails development, and trying to use patterns you learned elsewhere, you may have a less happy experience.</p>
<h3>Pros</h3>
<ul>
<li>Highly opinionated syntax and application architecture</li>
<li>Fast development</li>
<li>Large amount of gems available</li>
<li>Very devoted and active community</li>
<li>Convention over configuration</li>
</ul>
<p>npm</p>
<h3>Cons</h3>
<ul>
<li>Scaling is possible but not as easy as some other languages</li>
<li>Not as performant as other more modern approaches</li>
<li>Lack of flexibility</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
Azure web apps,Backend,Divest,none,"<p><a href=""https://azure.microsoft.com/en-us/services/app-service/web/"">Azure Web Apps</a> is a simple way to manage web applications built on <a href=""http://ASP.NET"">ASP.NET</a>. The application can then be bundled and placed on these servers that are running IIS. Generally speaking we do not encourage web apps. Containers should be utilized within <a href="""">Kubernetes</a>.</p>
<h3>Pros</h3>
<ul>
<li>Can leverage service plans for reusing the same sets of hardware</li>
<li>Scales extremely quickly</li>
<li>Relatively inexpensive</li>
</ul>
<h3>Cons</h3>
<ul>
<li>IIS</li>
<li>Slow hardware</li>
<li>Customization is difficult (e.g. put an updated version of .NET Framework in place)</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
Azure cloud services,Backend,Divest,none,"<p><a href=""https://azure.microsoft.com/en-us/services/cloud-services/"">Azure Cloud Services</a> is a simple way to manage a fleet of virual machines. An application bundle is built and then placed on the machines. Generally speaking we do not encourage provisioning an entire VM for a single application. Containers should be utilized within <a href="""">Kubernetes</a>.</p>
<h3>Pros</h3>
<ul>
<li>Simple and easy way to manage a fleet of virtual machines with the same software</li>
<li>Can scale to meet increased demand</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Slow Startup (~15 minutes)</li>
<li>Expensive</li>
<li>Customization is difficult (e.g. put an updated version of .NET Framework in place)</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2022</p>
"
VB.Net,Backend,Divest,none,coming
.NET Full Framework,Backend,Divest,none,coming
AWS Kinesis,Data,Invest,confident,"<p><a href=""https://aws.amazon.com/kinesis/"">AWS Kinesis</a> makes it easy to collect, process, and analyze real-time, streaming data so you can get timely insights and react quickly to new information. Amazon Kinesis offers key capabilities to cost-effectively process streaming data at any scale, along with the flexibility to choose the tools that best suit the requirements of your application. With Amazon Kinesis, you can ingest real-time data such as video, audio, application logs, website clickstreams, and IoT telemetry data for machine learning, analytics, and other applications. Amazon Kinesis enables you to process and analyze data as it arrives and respond instantly instead of having to wait until all your data is collected before the processing can begin.</p>
<h3>Pros</h3>
<ul>
<li>Fully managed</li>
<li>Guaranteed ordering</li>
<li>Direct integration into other services</li>
<li>Easy integration into Lambda</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No autoscaling</li>
<li>Expensive</li>
<li>Possible to hit throughput limits on a given partition within a shard easily</li>
<li>Consumers must use the Kinesis Client Library (Java)</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
AWS SNS,Data,Invest,confident,"<p><a href=""https://aws.amazon.com/sns/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;whats-new-cards.sort-order=desc"">AWS SNS</a> is a highly available, durable, secure, fully managed pub/sub messaging service that enables you to decouple microservices, distributed systems, and serverless applications. Amazon SNS provides topics for high-throughput, push-based, many-to-many messaging. Using Amazon SNS topics, your publisher systems can fan out messages to a large number of subscriber endpoints for parallel processing, including Amazon SQS queues, AWS Lambda functions, and HTTP/S webhooks. Additionally, SNS can be used to fan out notifications to end users using mobile push, SMS, and email.</p>
<h3>Pros</h3>
<ul>
<li>Serverless</li>
<li>Automatically scales to meed demand</li>
<li>Direct integration into other AWS services</li>
<li>Built in encryption mechanisms</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Specific message size limits</li>
<li>More costly than self host options</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Snowflake,Data,Invest,lock,"<p><a href=""hhttps://www.snowflake.com/"">Snowflake</a> is a modern data warehouse meant to augment data lakes.</p>
<p>Generally speaking Api Gateway is a cool technology but there is a strong preference to run appliations on our existing <a href="""">Kubernetes</a> clusters to take advantage of free resources that are already available.</p>
<h3>Pros</h3>
<ul>
<li>Very fast scale up of resources</li>
<li>CPU and storage capacities can be configured separately</li>
<li>Automatic performance tuning</li>
<li>Fully managed infrastructure</li>
<li>Cheaper than some other data warehouse technologies</li>
<li>Supports multi cloud</li>
<li>Simple to setup and get started</li>
<li>Direct integration into other services</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No on premise option</li>
<li>May not perform as well as other technologies when optimized</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
DynamoDB,Data,Invest,lock,"<p>Dynamo is a NOSQL database hosted and manged by AWS. It is built with scale in mind and we have had good experiences building solid scalable applications.</p>
<h3>Pros</h3>
<ul>
<li>Very inexpensive</li>
<li>Practically infinite scale</li>
<li>Incredible fast response times</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires up front knowledge of query patterns</li>
<li>Difficult to query ad-hoc</li>
</ul>
<p>Dynamo should be used by default for any microservice that is storing things as operational records that do not have heavy query requirements. For more information see <a href=""https://medium.com/imaginelearning/bring-dynamo-to-the-data-science-party-2d961b72bb8d?source=friends_link&amp;sk=5dd7bd16cbf678bb926122549d83cb4a"">This great Medium article</a></p>"
Elasticsearch,Data,Invest,confident,"<p><a href=""https://elastic.co"">Elasticsearch</a> is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine‑tuned relevancy, and powerful analytics that scale with ease.</p>
<h3>Pros</h3>
<ul>
<li>Extremely efficient text searching</li>
<li>Great for simple metric aggregations</li>
<li>Extremely fast response times</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No ability to join documents directly</li>
<li>Can be difficult to setup and maintain</li>
</ul>
<p>When decision made: 1/1/2020</p>
<p>When decision will be revisited: 1/1/2021</p>
"
Redis,Data,Invest,confident,"<p><a href=""https://redis.io/"">Redis</a> is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.</p>
<h3>Pros</h3>
<ul>
<li>Extremely fast response times</li>
<li>Has become the standard caching store for many systems</li>
<li>Easy to use</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Replication isn’t simple if required</li>
<li>No autoscaling options froms cloud providers</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Postgres,Data,Invest,lock,"<p><a href=""https://www.postgresql.org/"">Postgres</a> s a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.</p>
<h3>Pros</h3>
<ul>
<li>Document support (NoSQL like objects)</li>
<li>Broad array of enterprise features</li>
<li>Direct integration into other services</li>
<li>Open source (no licensing cost)</li>
<li>Solid profiling tools</li>
<li>Supports a notion of objects within the database (ORDBMS)</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Scaling for large loads can be challenging</li>
<li>Setup and configuration can require more work than other databases</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
PowerBI,Data,Invest,confident,"<p><a href=""https://powerbi.microsoft.com/en-us/"">PowerBI</a> is a collection of analytics tools developed by Microsoft. Over the years, it is one of the top BI tools used by analysts. When it comes to visualisation, Power BI is resolute and has a wide plethora of options and customisation. What’s more, it can even load various customisations from other BI platforms.</p>
<h3>Pros</h3>
<ul>
<li>Integrates with many different data sources easily</li>
<li>Powerful graphing and charting tools</li>
<li>Cost is less than Tableau or QlikView</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Setup and installation is a hassle</li>
<li>Report sharing requires a license</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Kinesis Data Analytics (Apache Flink),Data,Trial,budding,coming
Postgres (Aurora Serverless),Data,Trial,budding,"<p><a href=""https://aws.amazon.com/rds/aurora/serverless/?nc=sn&amp;loc=2&amp;dn=6"">Aurora Serverless (Postgres compatible)</a> is an on-demand, auto-scaling configuration for Amazon Aurora (MySQL-compatible and PostgreSQL-compatible editions), where the database will automatically start up, shut down, and scale capacity up or down based on your application’s needs. It enables you to run your database in the cloud without managing any database instances. It’s a simple, cost-effective option for infrequent, intermittent, or unpredictable workloads.</p>
<h3>Pros</h3>
<ul>
<li>Much cheaper than RDS provisioned instances</li>
<li>Auto scaling</li>
<li>Great for dev and test databases</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Will not perform as well as some other options</li>
<li>Only supported with specific versions of Postgres</li>
</ul>
<p>*** Should only be considered for non production use cases ***</p>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Databricks,Data,Trial,confident,"<p><a href=""https://databricks.com"">Databricks</a> is a service built around data systems and its processes. The intent is to make the configuration of data systems simpler and more accessible to the masses.</p>
<h3>Pros</h3>
<ul>
<li>Awesome notebook add ins</li>
<li>Polished UI</li>
<li>Managed configuration</li>
<li>Quicker to get started for non engineers</li>
<li>Cloud agnostic</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Expensive. Per node markup of $.40 per hour on top of EC2</li>
<li>Lack of configuration controls</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Matillion,Data,Hold,confident,"<p>Matillion is a purpose-built ETL designer and job engine. It’s a cloud-only product (cannot run locally in virtual machines or docker containers) and supports Redshift and Snowflake. The design canvas has a tree of job definitions and each job definition is represented as a graph of visual components. The user is able to drag and drop the components and alter their properties. Though the intent is largely to expose a point and click interface, it also supports custom SQL in various components and in practice Imagine Learning has used a fair amount of custom SQL.</p>
<p>While the product falls under an ETL umbrella, it is more accurately an ELT engine because the work is mostly executed in the target Redshift or Snowflake engine. In other words, executing a job (scheduled or otherwise) results in the Matillion runtime executing queries against Redshift/Snowflake such that the inputs and outputs of the queries are different tables in Redshift/Snowflake. The Matillion software itself runs on an EC2 instance but the resource utilization is relatively light there. Cost is based on actual EC2 cost plus a licensing fee to Matillion.</p>
<p>Matillion includes support for extraction from many source technologies. The pattern is such that queries can be executed against source systems and the results are placed in the target Redshift / Snowflake, and then transforms are executed in the form of SQL on the target system to move and transform the data to destination tables (such as fact and dimension tables).</p>
<h3>Pros</h3>
<ul>
<li>Potentially quicker to path to working ETL system than custom coded spark/glue/emr/databricks</li>
<li>SQL-centric nature well received by data engineers with extensive SQL background</li>
<li>Support for both Redshift and Snowflake as destination systems</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Cloud-only. No means to execute locally.</li>
<li>Compared to ETL where the majority of the T is done out-of-process from redshift / snowflake, a heaver load is placed on redshift / snowflake.</li>
</ul>
"
MongoDB,Data,Hold,none,"<p><a href=""hhttps://www.mongodb.com/"">MongoDB</a> is a general purpose, document-based, distributed database built for modern application developers and for the cloud era.</p>
<h3>Pros</h3>
<ul>
<li>Very fast document storage</li>
<li>Powerful index options</li>
<li>Scales with sharding</li>
<li>Works very will with high transaction counts</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Slow full text search</li>
<li>Sharding is complicated to set up</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
AWS Glue,Data,Hold,none,"<p><a href=""https://aws.amazon.com/glue/?whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;whats-new-cards.sort-order=desc"">AWS Glue</a> is a fully managed extract, transform, and load (ETL) service that makes it easy for customers to prepare and load their data for analytics. You can create and run an ETL job with a few clicks in the AWS Management Console. You simply point AWS Glue to your data stored on AWS, and AWS Glue discovers your data and stores the associated metadata (e.g. table definition and schema) in the AWS Glue Data Catalog. Once cataloged, your data is immediately searchable, queryable, and available for ETL.</p>
<h3>Pros</h3>
<ul>
<li>Fully managed</li>
<li>Serverless</li>
<li>Direct integration into other AWS</li>
</ul>
<h3>Cons</h3>
<ul>
<li>More expensive for continual jobs</li>
<li>Less performant than other offerings</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
AWS EMR (Spark),Data,Hold,none,"<p><a href=""https://aws.amazon.com/emr/?nc=sn&amp;loc=1&amp;whats-new-cards.sort-by=item.additionalFields.postDateTime&amp;whats-new-cards.sort-order=desc"">AWS EMR</a> is the industry-leading cloud big data platform for processing vast amounts of data using open source tools such as Apache Spark, Apache Hive, Apache HBase, Apache Flink, Apache Hudi, and Presto. With EMR you can run Petabyte-scale analysis at less than half of the cost of traditional on-premises solutions and over 3x faster than standard Apache Spark.</p>
<h3>Pros</h3>
<ul>
<li>Fully managed</li>
<li>Tight integration within AWS</li>
<li>Easy to get started</li>
<li>On-demand instances</li>
<li>Handles scale with ease</li>
<li>Can be tuned to get better performance</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Developer centric</li>
<li>Requires some knowledge of how Spark works</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
SQL Server,Data,Divest,none,"<p><a href=""https://www.microsoft.com/en-us/sql-server"">SQL Server</a> is a relational database technology backed by Microsoft. SQL Server has been around for many years and has improved significantly over the years to work well with enterprise applications.</p>
<h3>Pros</h3>
<ul>
<li>Built in security</li>
<li>Well known and used database</li>
<li>High performance</li>
<li>An array of tools built around the database</li>
</ul>
<h3>Cons</h3>
<ul>
<li>High licensing cost</li>
<li>Not a first class citizen on AWS</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
AWS Redshift,Data,Divest,none,"<p><a href=""https://aws.amazon.com/redshift/"">AWS Redshift</a> is the world’s fastest cloud data warehouse and gets faster every year. For performance intensive workloads you can use the new RA3 instances to get up to 3x the performance of any cloud data warehouse.</p>
<p>Generally speaking Api Gateway is a cool technology but there is a strong preference to run appliations on our existing <a href="""">Kubernetes</a> clusters to take advantage of free resources that are already available.</p>
<h3>Pros</h3>
<ul>
<li>Managed</li>
<li>Fast auto scaling</li>
<li>Fast query responses</li>
<li>Simple ETL from other AWS processes to Redshift</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Very expensive</li>
<li>Storage and compute historically not configurable separately (this is changing)</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Active Warehouse (Ruby),Data,Divest,none,"<p>The <a href=""https://github.com/activewarehouse/activewarehouse"">Active Warehouse (Ruby)</a> library provides classes and functions which help with building Data Warehouses using Rails.</p>
<h3>Pros</h3>
<ul>
<li>Tight integration with Ruby on Rails</li>
<li>Simple to setup and get started</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Difficult to maintain</li>
<li>Not a modern approach to data warehousing</li>
<li>Inactive for almost 6 years</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
<p>Data warehousing is migrating to <a href="""">Snowflake</a>.</p>
"
Periscope,Data,Divest,none,coming
AWS QuickSight,Data,Divest,none,"<p><a href=""https://aws.amazon.com/quicksight/"">Amazon QuickSight</a> is a fast, cloud-powered business intelligence service that makes it easy to deliver insights to everyone in your organization.</p>
<p>As a fully managed service, QuickSight lets you easily create and publish interactive dashboards that include ML Insights. Dashboards can then be accessed from any device, and embedded into your applications, portals, and websites.</p>
<h3>Pros</h3>
<ul>
<li>Amazon data sources are easy to integrate with</li>
<li>SPICE engine requires no prior setup</li>
<li>Cost friendly (pay as you go)</li>
<li>Visualization recommendations</li>
<li>Simple configuration and seup</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No Android support</li>
<li>Not as feature rich as other offerings</li>
<li>Limited options for graphs/charts</li>
<li>Difficult to have large application cohesion</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
MySQL,Data,Divest,none,"<p><a href=""https://www.mysql.com/"">MySQL</a> enables you to deliver high-performance and scalable Online Transaction Processing (OLTP) applications. It provides the ease of use that has made MySQL famous along with industrial strength performance and reliability.</p>
<h3>Pros</h3>
<ul>
<li>Most popular database worldwide</li>
<li>Open source</li>
<li>Performance on par with other database offerings</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Nascent support for documents</li>
<li>Can be slower for write-heavy applications</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
ELK (OpenDistro),Infrastructure,Invest,confident,"<p>ELK is the combination of Elasticsearch, Kibana and Logstash. See <a href="""">Elasticsearch</a> for more information on that but Logstash is a good ingester of data into Elasticsearch. This combination of services makes for a solid logging solution. Additionally, AWS has contributed back to the community with <a href=""https://opendistro.github.io/for-elasticsearch/"">OpenDistro</a> to fill the gaps in authentication and management of the system.</p>
<h3>Pros</h3>
<ul>
<li>Can handle large amounts of log data</li>
<li>Very low cost because there are no license restrictions</li>
<li>Automatic ingestion of any log</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires some maintenance and consideration on the indices themselves</li>
<li>Doesn’t have</li>
</ul>
<p><a href=""https://engineering.grab.com/structured-logging"">Structured logs</a> should be used where possible to make the searches as efficient as possible.</p>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Kibana,Infrastructure,Invest,confident,"<p>Kibana is a great frontend system for Elasticsearch. Look at (ELk)[] for more information as by itself it is merely a visualization tool.</p>
"
Kubernetes,Infrastructure,Invest,lock,"<p>Kubernetes is a container orchestration system. Kubernetes has become the de facto standard in the last few years when it comes to running containers.</p>
<h3>Pros</h3>
<ul>
<li>Provides infinite scaling abilities</li>
<li>Self healing pods when configured with health and readiness probes</li>
<li>Efficiently packs applications onto the nodes to achieve greater application density which leads to lower costs</li>
<li>Extremely active community that is constantly contributing back to the ecosystem</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Initial configuration can be very daunting</li>
<li>Required updates on the regular to not fall behind</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Docker,Infrastructure,Invest,lock,"<p>Docker is a means of packaging an application with all of its dependencies required to run. You can think of a Docker container as a lightweight virtual machine without the overhead of the OS. Typically we prefer smaller containers based on the Alpine images. When you build your applications this way you can have the same deployment patterns with all applications regardless of language.</p>
<h3>Pros</h3>
<ul>
<li>Provides a means to control the running environments easily</li>
<li>The container provides a consistent experience across the board</li>
<li>Containers enable greater application density to use every ounce of server resources efficiently</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Debugging can be more difficult if there is an issue with the container itself</li>
</ul>
<p>Combining these benefits with <a href="""">Kubernetes</a> leads to a great way to manage all applications efficiently.</p>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
AWS Lambda (event processing),Infrastructure,Invest,confident,"<p>AWS Lambda functions are a great way to run snippets of code without worrying about the underlying infrastructure the code would run on. Currently this is most useful as means to cheaply process events from Kinesis, DynamoDb streams, SNS, or SQS. AWS has provided all of the plumbing to handle this efficiently.</p>
<h3>Pros</h3>
<ul>
<li>Very cheap, insanely cheap</li>
<li>Effectively infinite scale</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not a good fit for IO bound operations</li>
<li>Deployment pipelines for the functions themselves is not ideal. Even when using <a href="""">Terraform</a> you have to resort to zip files.</li>
<li>You must wait for updated frameworks (new versions of Node or .NET core for example) to be available on AWS</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Fluentd,Infrastructure,Invest,confident,"<p><a href=""https://www.fluentd.org/"">Fluentd</a> is an open source tool that will automatically collect your logs and send them to an archiving source. There are many possibilities with the tool but we have found that running Fluentd as a daemon-set on our <a href="""">Kubernetes</a> cluster and logging things to <code>stdout</code> as the most effective logging solution.</p>
<h3>Pros</h3>
<ul>
<li>Automatic collection of logs from simple sources</li>
<li>Can do some log enrichment and manipulation</li>
<li>Can batch and send logs directly to Elasticsearch</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Configuration is a bit cryptic</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Github (source),Infrastructure,Invest,lock,"<p><a href=""https://github.com/"">Github</a> is a platform to host all of your git based repositories. By extension <a href=""https://git-scm.com"">git</a> should be used as your distributed version control system.</p>
<h3>Pros</h3>
<ul>
<li>Provides incredible integration and tooling</li>
<li>Well structured pull requests for code reviews</li>
<li>Ability to integrate bots to accomplish tasks</li>
<li>Builtin security scanning</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Occasional outages can affect engineering</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Clair,Infrastructure,Invest,leaning,"<p><a href=""https://coreos.com/clair/docs/latest/"">Clair</a> is a security scanner for Docker containers. Using Clair you are able to determine if there are known security issues with your container.</p>
<h3>Pros</h3>
<ul>
<li>Integrates well with a private Docker registry</li>
<li>Free</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No UI</li>
<li>Configuration isn’t straightforward</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Jira,Infrastructure,Invest,lock,"<p><a href=""https://www.atlassian.com/software/jira"">Jira</a> is project management software.</p>
<h3>Pros</h3>
<ul>
<li>Can use multiple workflows to accommodate different agile practices</li>
<li>Not the easiest interface to work with’</li>
<li>Cloud hosted</li>
<li>Good plugin support</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Can feel really clunky at times</li>
<li>Teams can be blocked when there are service interruptions</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
New Relic,Infrastructure,Invest,confident,"<p><a href=""https://newrelic.com/"">New Relic</a> is an analytics package that can be used to gain insights about your application. NewRelic can be depoyed as an Application Performance Monitor (APM) or to your infrastructure for insights into how the system is performing as a whole. New Relic should be used instead of <a href="""">Datadog</a>.</p>
<h3>Pros</h3>
<ul>
<li>Works across Azure and NewRelic</li>
<li>Powerful insights and dashboarding</li>
<li>Can be customized withing the New Relic ONE platform</li>
<li>Extremely easy integration into applications</li>
<li>Docker support</li>
<li>Easy to read tracing</li>
</ul>
<h3>Cons</h3>
<ul>
<li>More expensive than some other offerings</li>
<li>Cost prohibitive to use for logs as well</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2022 (under 2 year contract)</p>
"
Prometheus + Grafana,Infrastructure,Invest,confident,"<p><a href=""https://prometheus.io/"">Prometheus</a> is an open source time series database. Prometheus implements a pull model for metrics rather than a push model. Meaning your applications need to have an endpoint, typically <code>/metrics</code> that Prometheus can scrape metrics from.</p>
<p><a href=""https://grafana.com/"">Grafana</a> is an open source visualization tool that can connect to many different data sources to visualize data. Grafana also can provide alerting.</p>
<p>Because one is the data source and the other the visualization we are combining the two of them here.</p>
<h3>Pros</h3>
<ul>
<li>No cost</li>
<li>Large community support</li>
<li>Very customizable</li>
<li>Many open source libraries to easily add a metrics endpoint to any type of application</li>
<li>Can integrate with Elasticsearch and OpsGenie</li>
<li>Community made dashboards available</li>
</ul>
<h3>Cons</h3>
<ul>
<li>We administer these services ourselves</li>
<li>Lack of cohesion sometimes</li>
</ul>
<p>When decision made: 3/5/2020<br />
When decision will be revisited: 01/01/2022</p>
"
Velero (Heptio Ark),Infrastructure,Invest,confident,"<p><a href=""https://velero.io/"">Velero</a> formerly Heptio Ark is an automated backup solution native for Kubernetes. Velero automatically backs up your k8s configuration and takes snapshots of persistent volumes if necessary.</p>
<h3>Pros</h3>
<ul>
<li>Any container automatically gets backed up</li>
<li>Easy to restore entire cluster if necessary</li>
<li>No licensing cost</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Requires maintenance</li>
</ul>
"
Athena,Infrastructure,Invest,confident,"<p>Athena is a managed / on-demand query execution service. To date Imagine Learning has used it to execute SQL queries against data stored in S3. Athena can query data in S3 that is structured (parquet or ORC files) or semi-structured (JSON, XML, CSV).</p>
<p>A common scenario is that data exists in a data source that does not support SQL queries. For instance, the Imagine Learning L&amp;L and Spanish products store student data as JSON in Azure Blob storage. By replicating that data to S3 as parquet or ORC files, SQL queries can be executed against the data.</p>
<p>Sample use cases:</p>
<ul>
<li>Engineers and QA personnel can query ILEvents that operational services have emitted such as rostering events. In this use case, Athena is useful to explore the data or to troubleshoot whether a particular event was sent.</li>
<li>Engineers, QA, and data analysts can query student data for the Imagine Learning L&amp;L and Spanish products for the purposes of troubleshooting or for the purposes of producing an ad-hoc report.</li>
<li></li>
</ul>
<p>Some technology companies use Athena to transform data.  This might include taking a dataset from S3, executing a transform query, and storing the results to a second dataset in S3.</p>
<p>The cost structure of Athena queries is based on the volume of data that’s read from S3 to execute the query. The partitioning strategy of the S3 data is especially important and care should be taken to utilize the partitioning in query filters. For instance if data is partitioned by date and the Athena query has a corresponding filter then only a small subset of the S3 dataset is read when the query is executed.</p>
<p>AWS exposes a web interface for authoring and executing Athena queries which is sufficient for casual usage. Power users will more likely want to utilize an ODBC or JDBC driver so that a full-featured IDE can be used to author and execute queries, or in cases where an automated job is executing the query.</p>
<h3>Pros</h3>
<ul>
<li>Provides an SQL query interface to structured and semi-structed data stored in S3.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Without an adequate partitioning strategy and utilization of that strategy as part of the queries, costs to execute can be relatively high. As an example, the student data from L&amp;L / Spanish can cost up to $2.50 per query if the entire S3 dataset is read.  The worst case cost is entirely a function of the size of the dataset which suggests that documentation should exist to provide guidance depending on the dataset.</li>
<li>While Athena supports an ANSI SQL compatibility level, this may not be as full featured as SQL variants supported by other relational databases such as Microsoft SQL Server<br />
In some cases, other technologies like Spark could be a prefered means to query the S3 data.  This might be for performance reasons (more control over the node types that execute the query).</li>
</ul>
"
S3,Infrastructure,Invest,confident,"<p>S3 is a distributed file system. It is highly scalable and has many uses. Recommended usages are diverse. One such scenario: it is the recommended WNE technology for data lakes including two types of zones:</p>
<ol>
<li>Raw (such as a copy of operational data stores or as the history of operational events)</li>
<li>Curated/gold (post cleanse and transform)</li>
</ol>
<p>Since S3 is a file system, there are many choices for data format. Structured formats include parquet (recommended) and ORC. Semi-structured formats include JSON (recommend JSON per line), XML, and CSV. Unstructured formats include media files such as audio and video.</p>
<p>Related to above, we see it being used as the source of master data (entities) and as the underlying source of analytical data (with replication to serving databases potentially outside S3).</p>
<h3>Pros</h3>
<ul>
<li>Cost effective storage (keep in mind that there are multiple tiers selected based on data access frequency and latency requirements)</li>
<li>High scale</li>
<li>Reasonable latency</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Without oversight it’s easy to accumulate data that does not have value</li>
</ul>
"
Ansible (Configuration Management),Infrastructure,Invest,confident,coming
EKS,Infrastructure,Trial,budding,"<p><a href="""">Kubernetes</a> is the best container orchestration system around. AWS has decided to make it a first class citizen on AWS by offering a managed system. The idea here is to make it easier to maintain your k8s cluster for minimal cost.</p>
<h3>Pros</h3>
<ul>
<li>Easy to set up</li>
<li>Easier to stay up to date with k8s releases through managed nodes</li>
<li>Don’t have to worry about the control plane (master nodes)</li>
<li>More strictly adheres to best security practices</li>
<li>Integrated IAM support (though can be added to home spun clusters)</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Tied to AWS</li>
<li>Less ability to customize</li>
</ul>
<h3>Trial Goal</h3>
<p>The goal of trialing EKS is see if we can become more efficient and stay up to date without manually upgrading the cluster constantly with added security.</p>
"
Jenkins,Infrastructure,Trial,leaning,"<p><a href=""https://jenkins.io/"">Jenkins</a> is a build system. Built by the open source community it provides all the functionality needed for continuous integration.</p>
<h3>Pros</h3>
<ul>
<li>Innumerable plugins</li>
<li>Not the easiest interface to work with</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Sometimes low quality plugins due to open source community</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Teamcity,Infrastructure,Trial,leaning,"<p><a href=""https://www.jetbrains.com/teamcity/"">Teamcity</a> is a build system. Built by the folks at Jetbrains it provides all the functionality needed for continuous integration.</p>
<h3>Pros</h3>
<ul>
<li>Solid interface</li>
<li>Build templating</li>
<li>Well built plugins built by the Teamcity team</li>
<li>Great cloud build agent support on Kubernetes or using AWS AMIs</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Not as popular as Jenkins and so there are less plugins</li>
<li>Costs money</li>
</ul>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
Spinnaker,Infrastructure,Trial,leaning,"<p><a href=""https://www.spinnaker.io/"">Spinnaker</a> is a continuous delivery tool that can work with many different types of infrastructure. While Spinnaker can work with anything we have chosen to use it primarily to manage the deployment pipelines for the applications that reside on our Kubernetes cluster.</p>
<h3>Pros</h3>
<ul>
<li>Visual workflow for releases</li>
<li>Very customizable</li>
<li>Constantly evolving</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Very resource heavy application</li>
<li>Difficult configuration</li>
<li>Occasional there are significant changes required to upgrade</li>
<li>Not super well documented</li>
</ul>
<p>When decision made: 3/5/2020<br />
When decision will be revisited: 01/01/2022</p>
"
Concourse CI,Infrastructure,Trial,budding,"<p><a href=""https://concourse-ci.org/"">Concourse CI</a> is an open-source continuous thing-doer. Built on the simple mechanics of resources, tasks, and jobs, Concourse presents a general approach to automation that makes it great for CI/CD. Could potentially replace <a href="""">Spinnaker</a> for CI.</p>
<h3>Pros</h3>
<ul>
<li>Native Kubernetes support</li>
<li>CI is under source control by default</li>
<li>Lightweight</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Fairly new system</li>
<li>Lack of plugins (design decision)</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Terraform (Provisioning),Infrastructure,Trial,leaning,"<p><a href=""https://www.terraform.io/"">Terraform</a> is an open source tool to use <code>Infrastructure as Code</code> principles. As your infrastructure is created you can always make modifications and deploy all of your infra like you would with code.</p>
<h3>Pros</h3>
<ul>
<li>Syntactically superior to other tools</li>
<li>Free</li>
<li>Active community</li>
<li>Can be used with any type of infra, not just AWS</li>
<li>Leads to repeatable infra with less errors</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Doesn’t provided direct drift detection</li>
<li>IAM access is required to use Terraform effectively</li>
</ul>
<p>Terraform workspaces should be employed to separate different environments.<br />
Replaces <a href="""">Cloud Formation</a></p>
<p>When decision made:</p>
<p>When decision will be revisited:</p>
"
AWS Cloud Formation,Infrastructure,Trial,leaning,"<p><a href=""https://aws.amazon.com/cloudformation/"">CloudFormation</a> iprovides a common language for you to model and provision AWS and third party application resources in your cloud environment. AWS CloudFormation allows you to use programming languages or a simple text file to model and provision, in an automated and secure manner, all the resources needed for your applications across all regions and accounts. This gives you a single source of truth for your AWS and third party resources.</p>
<h3>Pros</h3>
<ul>
<li>Native integration with AWS</li>
<li>Drift detection</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Only works with AWS</li>
<li>Tools and syntax are arguably unintuitive</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Harbor,Infrastructure,Trial,budding,"<p><a href=""https://goharbor.io"">Harbor</a> is an open source registry that secures artifacts with policies and role-based access control, ensures images are scanned and free from vulnerabilities, and signs images as trusted. As a CNCF Graduated project, Harbor delivers compliance, performance, and interoperability to help you consistently and securely manage artifacts across cloud native compute platforms like Kubernetes and Docker.</p>
<h3>Pros</h3>
<ul>
<li>Built in security scanning through <a href="""">Clair</a></li>
<li>CNCF incubating</li>
<li>Active community</li>
<li>Integrated web ui</li>
</ul>
<h3>Cons</h3>
<ul>
<li>We would host ourselves</li>
<li>Cost prohibitive to use for logs as well</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
ECR,Infrastructure,Trial,budding,"<p><a href=""https://aws.amazon.com/ecr/"">ECR</a> is a fully-managed Docker container registry that makes it easy for developers to store, manage, and deploy Docker container images. Amazon ECR is integrated with Amazon Elastic Container Service (ECS), simplifying your development to production workflow. Amazon ECR eliminates the need to operate your own container repositories or worry about scaling the underlying infrastructure. Amazon ECR hosts your images in a highly available and scalable architecture, allowing you to reliably deploy containers for your applications.</p>
<h3>Pros</h3>
<ul>
<li>Integration with IAM</li>
<li>Fully managed and hosted</li>
<li>Powerful insights and dashboarding</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No security scanning</li>
<li>Interface is lacking</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
AWS Api Gateway,Infrastructure,Hold,none,"<p><a href=""https://aws.amazon.com/api-gateway/"">Api Gateway</a> is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. APIs act as the “front door” for applications to access data, business logic, or functionality from your backend services. Using API Gateway, you can create RESTful APIs and WebSocket APIs that enable real-time two-way communication applications. API Gateway supports containerized and serverless workloads, as well as web applications.</p>
<p>Generally speaking Api Gateway is a cool technology but there is a strong preference to run appliations on our existing <a href="""">Kubernetes</a> clusters to take advantage of free resources that are already available.</p>
<h3>Pros</h3>
<ul>
<li>Fully managed</li>
<li>Simple to setup and get started</li>
<li>Direct integration into other services</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Api gateway can be more expensive when dealing with large loads</li>
<li>Difficult to have large application cohesion</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Serverless.com,Infrastructure,Hold,none,"<p><a href=""https://serverless.com/"">Serverless</a> The Serverless Framework gives you everything you need to develop, deploy, monitor and secure serverless applications on any cloud.</p>
<h3>Pros</h3>
<ul>
<li>Cloud agnostic</li>
<li>Easy to use tooling</li>
<li>Well documented</li>
<li>Can save significant amounts of money over traditional monolithic applications</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Path to serverless is generally a rewrite</li>
<li>Other applications can be dockerized and ran on existing resources</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Chef (All),Infrastructure,Divest,none,"<p><a href=""https://www.chef.io/products/chef-infra/"">Chef Infra</a> automates infrastructure configuration, ensuring every system is configured correctly and consistently. Relatively new addition to the infrastructure as code arena but <a href="""">Terraform</a> or <a href="""">Cloud Formation</a> are strongly preferred.</p>
<h3>Pros</h3>
<ul>
<li>Manage your infrastructure declaratively</li>
<li>Drift detection</li>
<li>Easty to get started</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Lack of community support</li>
<li>Not open source</li>
</ul>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
ECS,Infrastructure,Divest,none,"<p><a href=""https://aws.amazon.com/ecs/"">Elastic Container Service (ECS)</a> is a fully managed container orchestration service. Customers such as Duolingo, Samsung, GE, and Cookpad use ECS to run their most sensitive and mission critical applications because of its security, reliability, and scalability.</p>
<h3>Pros</h3>
<ul>
<li>Support for serverless containers through Fargate</li>
<li>AWS native</li>
<li>Managed infrastructure</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Lacks community support</li>
<li>Only works with AWS</li>
</ul>
<p>While ECS and Kubernetes are very similar <a href="""">Kubernetes</a> is favored heavily.</p>
<p>When decision made: 5/1/2020</p>
<p>When decision will be revisited: 5/1/2021</p>
"
Datadog,Infrastructure,Divest,none,"<p><a href=""https://www.datadoghq.com/"">Datadog</a> is a hosted platform for monitoring and analytics. Datadog enables easy instrumentation of many types of applications and infrastructure.</p>
<h3>Pros</h3>
<ul>
<li>Very quick to implement</li>
<li>Lots of canned reports and dashboards</li>
<li>Compared to other providers they have been cheaper</li>
</ul>
<h3>Cons</h3>
<ul>
<li>No Azure support</li>
<li>Dashboards aren’t very straightforward</li>
</ul>
<p>When decision made: 3/5/2020<br />
When decision will be revisited: 01/01/2022</p>
"
TFS,Infrastructure,Divest,none,coming
Subversion,Infrastructure,Divest,none,coming
Stackify,Infrastructure,Divest,none,coming
App Dynamics,Infrastructure,Divest,none,coming
AMI (Custom built),Infrastructure,Divest,none,coming
